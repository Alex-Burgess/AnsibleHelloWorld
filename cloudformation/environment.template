{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Creates Ansible Controller setup and Webserver Instances",
  "Parameters": {
    "AppName" : {
      "Type" : "String",
      "Description" : "Enter the name for the application",
      "MinLength": 1,
      "MaxLength": 64,
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9-]*",
      "ConstraintDescription": "AppName must begin with a letter and contain alphanumeric characters, or a hyphen."
    },
    "Environment": {
      "Type" : "String",
      "AllowedValues" : ["prod", "staging", "test"],
      "Default" : "test",
      "Description" : "Enter the environment",
      "ConstraintDescription" : "Environment must be one of prod, uat, dev, or test"
    },
    "SubnetIDs": {
       "Type" : "List<AWS::EC2::Subnet::Id>",
       "Description" : "List of Subnet IDs"
    },
    "SecurityGroupIDs": {
      "Type" : "List<AWS::EC2::SecurityGroup::Id>",
      "Description" : "List of Security Group IDs"
    },
    "InstanceTypeParameter" : {
      "Type" : "String",
      "Default" : "t3.nano",
      "AllowedValues" : ["t3.nano", "t3.micro", "t3.small", "t2.nano", "t2.micro", "t2.small"],
      "Description" : "Enter t3.nano, t3.micro, t3.small, t2.nano, t2.micro, or t2.small. Default is t3.nano."
    },
    "ImageID": {
      "Type" : "AWS::EC2::Image::Id",
      "Description" : "Enter AMI for instance"
    },
    "InstanceProfileName": {
      "Type" : "String",
      "Description" : "Enter name of IAM Instance Profile"
    },
    "SpotPrice": {
      "Type" : "String",
      "Default" : "0.0057",
      "Description" : "Enter a spot price for the instances. Default is 0.0057 which is the on demand price for t3.nano."
   },
   "PurchaseOption": {
     "Type" : "String",
     "Description" : "Choose one of OnDemand or Spot",
     "AllowedValues" : ["OnDemand", "Spot"],
     "Default" : "Spot"
   },
   "InstanceKeyName" : {
      "Type" : "String",
      "Description" : "Enter the name for the key used to ssh to ec2 instances."
   },
   "AnsibleControllerDesiredCapacity" : {
     "Type" : "String",
     "Default" : "2",
     "Description" : "Enter the number of ansible controller instances required."
   },
   "WebserverDesiredCapacity" : {
     "Type" : "String",
     "Default" : "2",
     "Description" : "Enter the number of webserver instances required."
   }
  },
  "Conditions" : {
     "IsSpot" : {"Fn::Equals" : [{"Ref" : "PurchaseOption"}, "Spot"]}
  },
  "Resources": {
    "AnsibleLaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "Comment1" : "Bootstrap ansible controller server. Make use of cfn helper scripts for updates and bespoke tag display tool. Update all yum packages for security patches and install pip. Bootstrap Ansible setup, with key and necessary directory structure.",

        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "Install" : [ "HelperScripts", "BasePackages", "AnsibleSetup", "AppDirs", "TagTool" ]
          },
          "HelperScripts" : {
            "files" : {
              "/etc/cfn/cfn-hup.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n",
                  "interval=5\n"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.AnsibleLaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                  "         --stack ", { "Ref" : "AWS::StackName" },
                  "         --configsets Install ",
                  "         --resource AnsibleLaunchConfig ",
                  "         --region ", { "Ref" : "AWS::Region" }, "\n",
                  "runas=root\n"
                ]]}
              }
            },
            "services" : {
              "sysvinit" : {
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                  "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]
                }
              }
            }
          },
          "BasePackages" : {
            "packages" : {
              "yum" : {
                "python2-pip" : []
              }
            },
            "commands" : {
              "update_yum_packages" : {
                "command" : "yum update -y"
              }
            }
          },
          "AnsibleSetup" : {
            "commands" : {
              "1_create_ansible_user" : {
                "command" : "useradd -m ansible",
                "test" : "test -n grep ansible /etc/passwd"
              },
              "2_add_ec2-user_to_ansible_group" : {
                "command" : "usermod -a -G ansible ec2-user"
              },
              "3_install_ansible_with_user" : {
                "command" : "su ansible -c 'pip install ansible --user --no-cache-dir'"
              },
              "4_make_ssh_directory_for_ansible" : {
                "command" : "su ansible -c 'mkdir /home/ansible/.ssh'",
                "test" : "test ! -e /home/ansible/.ssh"
              },
              "5_set_file_permissions_of_ansible_ssh_directory" : {
                "command" : "su ansible -c 'chmod 700 /home/ansible/.ssh'"
              },
              "6_change_file_permisions_of_private_key" : {
                "command" : "chmod 600 /home/ansible/.ssh/ansible_$env_var",
                "env" : { "env_var" : { "Ref" : "Environment"} },
                "test" : "test -e /home/ansible/.ssh/ansible_$env_var"
              },
              "7_get_ansible_private_key" : {
                "command" : "su ansible -c 'aws ssm get-parameter --name \"/Ansible/HelloWorld/$env_var/private_key\" --with-decryption --query Parameter.Value  --output text --region `curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | grep region | cut -f4 -d \"\\\"\"` > /home/ansible/.ssh/ansible_$env_var'",
                "env" : { "env_var" : { "Ref" : "Environment"} }
              },
              "8_set_file_permisions_for_ansible_private_key" : {
                "command" : "su ansible -c 'chmod 400 /home/ansible/.ssh/ansible_test'"
              }
            }
          },
          "AppDirs" : {
            "commands" : {
              "1_create_app_dir" : {
                "command" : "mkdir /app",
                "test" : "test ! -e /app"
              },
              "2_set_app_dir_permissions" : {
                "command" : "chmod 755 /app"
              },
              "3_create_ansible_directory" : {
                "command" : "mkdir /app/ansible",
                "test" : "test ! -e /app/ansible"
              },
              "4_set_ansible_dir_permissions" : {
                "command" : "chmod 775 /app/ansible"
              },
              "5_set_ansible_dir_owner" : {
                "command" : "chown ansible:ansible /app/ansible"
              },
              "6_create_applications_directory" : {
                "command" : "mkdir /app/applications -m 775",
                "test" : "test ! -e /app/applications"
              },
              "7_set_applications_dir_permissions" : {
                "command" : "chmod 775 /app/applications"
              },
              "8_set_applications_dir_owner" : {
                "command" : "chown ansible:ansible /app/applications"
              }
            }
          },
          "TagTool" : {
            "files" : {
              "/usr/local/bin/ec2_tags.sh" : {
                "source": "https://raw.githubusercontent.com/Alex-Burgess/InterestingTools/master/ec2_tags.sh",
                "mode": "000744",
                "user": "root",
                "group": "root"
              }
            },
            "commands" : {
              "create_tag_export_file" : {
                "command" : "/usr/local/bin/ec2_tags.sh"
              },
            }
          }
        }
      },
      "Properties" : {
        "KeyName": { "Ref" : "InstanceKeyName"},
        "ImageId" : { "Ref" : "ImageID" },
        "SecurityGroups" : {"Ref": "SecurityGroupIDs"},
        "InstanceType" : { "Ref" : "InstanceTypeParameter" },
        "IamInstanceProfile" : { "Ref": "InstanceProfileName"},
        "AssociatePublicIpAddress" : true,
        "SpotPrice" : {"Fn::If": [ "IsSpot", { "Ref" : "SpotPrice" }, { "Ref" : "AWS::NoValue"}]},
        "UserData": { "Fn::Base64" : { "Fn::Join" : ["", [
           "#!/bin/bash -xe\n",
           "yum install -y aws-cfn-bootstrap\n",

           "# Install the files and packages from the metadata\n",
           "/opt/aws/bin/cfn-init -v ",
           "         --stack ", { "Ref" : "AWS::StackName" },
           "         --resource AnsibleLaunchConfig ",
           "         --configsets Install ",
           "         --region ", { "Ref" : "AWS::Region" }, "\n",

           "# Signal the status from cfn-init\n",
           "/opt/aws/bin/cfn-signal -e $? ",
           "         --stack ", { "Ref" : "AWS::StackName" },
           "         --resource AnsibleControllerGroup ",
           "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      }
    },
    "AnsibleControllerGroup": {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy" : {
        "AutoScalingRollingUpdate" : {
          "MinInstancesInService" : "1",
          "MaxBatchSize" : "1",
          "PauseTime" : "PT2M",
          "WaitOnResourceSignals" : "true"
        }
      },
      "Properties" : {
        "VPCZoneIdentifier" : { "Ref": "SubnetIDs" },
        "AvailabilityZones" : { "Fn::GetAZs" : ""},
        "LaunchConfigurationName" : { "Ref" : "AnsibleLaunchConfig" },
        "DesiredCapacity" : { "Ref" : "AnsibleControllerDesiredCapacity" },
        "MaxSize" : { "Ref" : "AnsibleControllerDesiredCapacity" },
        "MinSize" : "1",
        "Tags": [
           { "Key" : "Name", "Value" : "AnsibleController", "PropagateAtLaunch" : true },
           { "Key" : "Application", "Value" : {"Ref" : "AppName" }, "PropagateAtLaunch" : true },
           { "Key" : "Environment", "Value" : { "Ref" : "Environment" }, "PropagateAtLaunch" : true },
           { "Key" : "Type", "Value" : "AnsibleController", "PropagateAtLaunch" : true }
        ],
      }
    },
    "WebserverLaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "Comment1" : "Bootstrap webserver server. Make use of cfn helper scripts for updates and bespoke tag display tool. Update all packages for security patches. Bootstrap apache user with ansible key.",

        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "Install" : [ "HelperScripts", "BasePackages", "ApacheSetup", "TagTool" ]
          },
          "HelperScripts" : {
            "files" : {
              "/etc/cfn/cfn-hup.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n",
                  "interval=5\n"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.WebserverLaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                  "         --stack ", { "Ref" : "AWS::StackName" },
                  "         --configsets Install ",
                  "         --resource WebserverLaunchConfig ",
                  "         --region ", { "Ref" : "AWS::Region" }, "\n",
                  "runas=root\n"
                ]]}
              }
            },
            "services" : {
              "sysvinit" : {
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                  "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]
                }
              }
            }
          },
          "BasePackages" : {
            "commands" : {
              "update_yum_packages" : {
                "command" : "yum update -y"
              }
            }
          },
          "TagTool" : {
            "files" : {
              "/usr/local/bin/ec2_tags.sh" : {
                "source": "https://raw.githubusercontent.com/Alex-Burgess/InterestingTools/master/ec2_tags.sh",
                "mode": "000744",
                "user": "root",
                "group": "root"
              }
            },
            "commands" : {
              "create_tag_export_file" : {
                "command" : "/usr/local/bin/ec2_tags.sh"
              },
            }
          },
          "ApacheSetup" : {
            "commands" : {
              "1_create_apache_user" : {
                "command" : "useradd -m apache",
                "test" : "test -n grep apache /etc/passwd"
              },
              "2_add_ec2-user_to_apache_group" : {
                "command" : "usermod -a -G apache ec2-user"
              },
              "3_make_ssh_directory_for_ansible" : {
                "command" : "su apache -c 'mkdir /home/apache/.ssh'",
                "test" : "test ! -e /home/apache/.ssh"
              },
              "4_set_file_permissions_of_ansible_ssh_directory" : {
                "command" : "su apache -c 'chmod 700 /home/apache/.ssh'"
              },
              "5_get_latest_ansible_pub_key" : {
                "command" : "su apache -c 'aws ssm get-parameter --name \"/Ansible/HelloWorld/$env_var/public_key\" --with-decryption --query Parameter.Value --output text --region `curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | grep region | cut -f4 -d \"\\\"\"` > /home/apache/.ssh/authorized_keys'",
                "env" : { "env_var" : { "Ref" : "Environment"} },
              }
            }
          }
        }
      },
      "Properties" : {
        "KeyName": { "Ref" : "InstanceKeyName"},
        "ImageId" : { "Ref" : "ImageID" },
        "SecurityGroups" : {"Ref": "SecurityGroupIDs"},
        "InstanceType" : { "Ref" : "InstanceTypeParameter" },
        "IamInstanceProfile" : { "Ref": "InstanceProfileName"},
        "AssociatePublicIpAddress" : true,
        "SpotPrice" : {"Fn::If": [ "IsSpot", { "Ref" : "SpotPrice" }, { "Ref" : "AWS::NoValue"}]},
        "UserData": { "Fn::Base64" : { "Fn::Join" : ["", [
           "#!/bin/bash -xe\n",
           "yum install -y aws-cfn-bootstrap\n",

           "# Install the files and packages from the metadata\n",
           "/opt/aws/bin/cfn-init -v ",
           "         --stack ", { "Ref" : "AWS::StackName" },
           "         --resource WebserverLaunchConfig ",
           "         --configsets Install ",
           "         --region ", { "Ref" : "AWS::Region" }, "\n",

           "# Start up the cfn-hup daemon to listen for changes to the Web Server metadata\n",
           "/opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'\n",

           "# Signal the status from cfn-init\n",
           "/opt/aws/bin/cfn-signal -e $? ",
           "         --stack ", { "Ref" : "AWS::StackName" },
           "         --resource WebserverGroup ",
           "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      }
    },
    "WebserverGroup": {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy" : {
        "AutoScalingRollingUpdate" : {
          "MinInstancesInService" : "1",
          "MaxBatchSize" : "1",
          "PauseTime" : "PT2M",
          "WaitOnResourceSignals" : "true"
        }
      },
      "Properties" : {
        "VPCZoneIdentifier" : { "Ref": "SubnetIDs" },
        "AvailabilityZones" : { "Fn::GetAZs" : ""},
        "LaunchConfigurationName" : { "Ref" : "WebserverLaunchConfig" },
        "DesiredCapacity" : { "Ref" : "WebserverDesiredCapacity" },
        "MaxSize" : { "Ref" : "WebserverDesiredCapacity" },
        "MinSize" : "1",
        "Tags": [
           { "Key" : "Name", "Value" : "HelloWorldWebserver", "PropagateAtLaunch" : true },
           { "Key" : "Application", "Value" : {"Ref" : "AppName" }, "PropagateAtLaunch" : true },
           { "Key" : "Environment", "Value" : { "Ref" : "Environment" }, "PropagateAtLaunch" : true },
           { "Key" : "Type", "Value" : "Webserver", "PropagateAtLaunch" : true }
        ],
      }
    }
  }
}
